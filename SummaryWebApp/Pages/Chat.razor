@page "/"
@using Microsoft.ML.Tokenizers
@using Plugins.Models
@using SummaryWebApp.Services
@using SummaryWebApp.Models
@using SummaryWebApp.Contracts
@inject IChatService ChatService
@inject ITokenizerService TokenizerService

<PageTitle>Summarize</PageTitle>

<h1>Welcome to the summary app!</h1>

<div class="chat-container">
    <div class="settings-container">
        <div class="left-group">
            <!-- Slider to adjust the maximum output length -->
            <label for="tokenLabel">Max Output Length</label>
            <input type="range" min="10" max="200" id="outputLenId" @bind="_outputLength">
            <span>@_outputLength</span>
        </div>
        <div class="right-group">
            <!-- Dropdown to select the topic -->
            <label for="topicLabel">Topic Name</label>
            <InputSelect @bind-Value="_selectedTopic" id="topicSelectId">
                @foreach (var opt in Enum.GetValues(typeof(Topic)))
                {
                    <option>@opt</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="message-display">
        @foreach (var message in _messages)
        {
            if (message.IsSent)
            {
                <!-- Display sent messages -->
                <div class="sent-message">
                    @message.UserText
                </div>
            }
            else
            {
                <!-- Display received messages with options to regenerate, navigate responses, and show timestamp -->
                <div class="received-message">
                    @message.Responses[message.CurrIndex]
                    <hr>
                    <div class="left-group">
                        <button class="btn btn-secondary" @onclick="() => RegenerateLastMessageAsync(message)">&#8635;</button>
                        @if (message.Responses.Count > 1)
                        {
                            <button class="btn btn-secondary" @onclick="() => PrevPage(message)">&lt</button>
                            <button class="btn btn-light" disabled>@(@message.CurrIndex + 1) / @message.Responses.Count</button>
                            <button class="btn btn-secondary" @onclick="() => NextPage(message)">&gt</button>
                        }
                        <p class="right-group">@DateTime.Now</p>
                    </div>
                </div>
            }
        }
    </div>

    <EditForm Model="this" OnValidSubmit="SendMessageAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="input-container">
            <!-- Input field for user message with live token count -->
            <InputText @bind-Value="_userMessage" @oninput="GetLiveCountAsync" placeholder="Type your message..." class="message-input" />
            <button type="submit" class="btn btn-primary">Send</button>
        </div>
    </EditForm>
    <div>
        <!-- Display the current input token count -->
        Input token count: @_inputTokenCount
    </div>
</div>

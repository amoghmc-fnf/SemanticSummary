@page "/"
@using Microsoft.ML.Tokenizers
@using Plugins.Models
@using SummaryWebApp.Services
@using SummaryWebApp.Models
@using SummaryWebApp.Contracts
@inject IChatService ChatService
@inject ITokenizerService TokenizerService

<PageTitle>Summarize</PageTitle>

<h1>Welcome to the summary app!</h1>

<div class="chat-container">
    <div class="settings-container">
        <div class="left-group">
            <!-- Slider to adjust the maximum output length -->
            <label for="tokenLabel">Max Output Length</label>
            <input type="range" min="10" max="200" id="outputLenId" @bind="_outputLength">
            <span>@_outputLength</span>
        </div>
        <div class="right-group">
            <!-- Dropdown to select the topic -->
            <label for="topicLabel">Topic Name</label>
            <InputSelect @bind-Value="_selectedTopic" id="topicSelectId">
                @foreach (var opt in Enum.GetValues(typeof(Topic)))
                {
                    <option>@opt</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="message-display">
        @foreach (var message in _messages)
        {
            if (message.IsSent)
            {
                <!-- Display sent messages -->
                <div class="sent-message">
                    @message.UserText
                </div>
            }
            else
            {
                <!-- Display received messages with options to regenerate, navigate responses, and show timestamp -->
                <div class="received-message">
                    @message.Responses[message.CurrIndex]
                    <hr>
                    <div class="left-group">
                        <button class="btn btn-secondary" @onclick="() => RegenerateLastMessageAsync(message)">&#8635;</button>
                        @if (message.Responses.Count > 1)
                        {
                            <button class="btn btn-secondary" @onclick="() => PrevPage(message)">&lt</button>
                            <button class="btn btn-light" disabled>@(@message.CurrIndex + 1) / @message.Responses.Count</button>
                            <button class="btn btn-secondary" @onclick="() => NextPage(message)">&gt</button>
                        }
                        <p class="right-group">@DateTime.Now</p>
                    </div>
                </div>
            }
        }
    </div>

    <EditForm Model="this" OnValidSubmit="SendMessageAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="input-container">
            <!-- Input field for user message with live token count -->
            <InputText @bind-Value="_userMessage" @oninput="GetLiveCountAsync" placeholder="Type your message..." class="message-input" />
            <button type="submit" class="btn btn-primary">Send</button>
        </div>
    </EditForm>
    <div>
        <!-- Display the current input token count -->
        Input token count: @_inputTokenCount
    </div>
</div>

@code {
    private int _outputLength;
    private string _userMessage;
    private List<Message> _messages;
    private Topic _selectedTopic;
    private int _inputTokenCount;
    private const int DefaultResponsesLimit = 3;

    public Chat()
    {
        _outputLength = 20;
        _selectedTopic = Topic.Generic;
        _userMessage = string.Empty;
        _messages = new();
        _inputTokenCount = 0;
    }

    /// <summary>
    /// This method gives the live count of the tokens used by the input message.
    /// </summary>
    /// <param name="changeEvent">The change in input message length.</param>
    private async Task GetLiveCountAsync(ChangeEventArgs changeEvent)
    {
        try
        {
            _userMessage = changeEvent.Value?.ToString() ?? string.Empty;
            _inputTokenCount = await TokenizerService.GetTokenCountAsync(_userMessage);
            StateHasChanged();
        }
        catch (ArgumentNullException)
        {
            throw new ArgumentNullException(nameof(changeEvent), "Change event value cannot be null.");
        }
        catch (NullReferenceException ex)
        {
            throw new NullReferenceException("An error occurred while processing the input message.", ex);
        }
    }

    /// <summary>
    /// Sends the user's message and processes the response.
    /// </summary>
    private async Task SendMessageAsync()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(_userMessage))
            {
                await ChatService.UpdateTopicAsync(_selectedTopic);
                await ChatService.UpdatePromptLengthAsync(_outputLength);
                var response = await ChatService.GetSummaryAsync(_userMessage);
                _messages.Add(new Message { UserText = _userMessage, IsSent = true });
                _messages.Add(new Message
                    {
                        UserText = _userMessage,
                        IsSent = false,
                        Responses = new List<string> { response },
                        Topic = _selectedTopic,
                        PromptLen = _outputLength
                    });
                _selectedTopic = await ChatService.GetTopicAsync();
                _outputLength = await ChatService.GetPromptLengthAsync();
                _userMessage = string.Empty; // Clear the input after sending
                _inputTokenCount = 0;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException("An error occurred while sending the message.", ex);
        }
    }

    /// <summary>
    /// Regenerates the last message's response if the number of responses is below the default limit.
    /// </summary>
    /// <param name="message">The message to regenerate the response for.</param>
    private async Task RegenerateLastMessageAsync(Message message)
    {
        try
        {
            if (message.Responses.Count < DefaultResponsesLimit)
            {
                await ChatService.UpdateTopicAsync(message.Topic);
                await ChatService.UpdatePromptLengthAsync(message.PromptLen);
                var response = await ChatService.GetRegeneratedSummaryAsync(message.UserText);

                message.Responses.Add(response);
                message.CurrIndex++;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException("An error occurred while regenerating the message.", ex);
        }
    }

    /// <summary>
    /// Moves to the previous response page of the message.
    /// </summary>
    /// <param name="message">The message to navigate.</param>
    private static void PrevPage(Message message)
    {
        if (message.CurrIndex > 0)
            message.CurrIndex--;
    }

    /// <summary>
    /// Moves to the next response page of the message.
    /// </summary>
    /// <param name="message">The message to navigate.</param>
    private static void NextPage(Message message)
    {
        if (message.CurrIndex < message.Responses.Count - 1)
            message.CurrIndex++;
    }
}